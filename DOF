// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


library SafeMath {
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}


contract Ownable {
    address public _owner;


    modifier onlyOwner() {
        require(_owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public  onlyOwner {
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public  onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        _owner = newOwner;
    }
}


interface IBEP20 {
  /**
   * @dev Returns the amount of tokens in existence.
   */
  function totalSupply() external view returns (uint256);

  /**
   * @dev Returns the token decimals.
   */
  function decimals() external view returns (uint8);

  /**
   * @dev Returns the token symbol.
   */
  function symbol() external view returns (string memory);

  /**
  * @dev Returns the token name.
  */
  function name() external view returns (string memory);

  /**
   * @dev Returns the bep token owner.
   */
  function getOwner() external view returns (address);

  /**
   * @dev Returns the amount of tokens owned by `account`.
   */
  function balanceOf(address account) external view returns (uint256);

  /**
   * @dev Moves `amount` tokens from the caller's account to `recipient`.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * Emits a {Transfer} event.
   */
  function transfer(address recipient, uint256 amount) external returns (bool);

  /**
   * @dev Returns the remaining number of tokens that `spender` will be
   * allowed to spend on behalf of `owner` through {transferFrom}. This is
   * zero by default.
   *
   * This value changes when {approve} or {transferFrom} are called.
   */
  function allowance(address _owner, address spender) external view returns (uint256);

  /**
   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * IMPORTANT: Beware that changing an allowance with this method brings the risk
   * that someone may use both the old and the new allowance by unfortunate
   * transaction ordering. One possible solution to mitigate this race
   * condition is to first reduce the spender's allowance to 0 and set the
   * desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   *
   * Emits an {Approval} event.
   */
  function approve(address spender, uint256 amount) external returns (bool);

  /**
   * @dev Moves `amount` tokens from `sender` to `recipient` using the
   * allowance mechanism. `amount` is then deducted from the caller's
   * allowance.
   *
   * Returns a boolean value indicating whether the operation succeeded.
   *
   * Emits a {Transfer} event.
   */
  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

  /**
   * @dev Emitted when `value` tokens are moved from one account (`from`) to
   * another (`to`).
   *
   * Note that `value` may be zero.
   */
  event Transfer(address indexed from, address indexed to, uint256 value);

  /**
   * @dev Emitted when the allowance of a `spender` for an `owner` is set by
   * a call to {approve}. `value` is the new allowance.
   */
  event Approval(address indexed owner, address indexed spender, uint256 value);
}


contract DOF is Ownable ,Context ,IBEP20 {

    mapping(address=>uint256) private _balances;
    mapping(address=>mapping(address=>uint256)) private _allowances;
    mapping(address=>bool) private _whiteList;
    mapping(address=>bool) private _blackList;
    bool private _tradeLock;

    uint8 private _decimals;
    string private _name;
    string private _symbol;
    uint256 private _totalSupply;
    using SafeMath for uint256;

    constructor(){ 
        _decimals = 18;
        _name = "Doors Of Freedom";
        _symbol = "DOF";
        _owner = msg.sender;
        _whiteList[msg.sender] = true;
        _tradeLock = true;
        _totalSupply = 3000000000000;
        _balances[msg.sender] = _totalSupply;  
    }
  
    function turnTradeLock()public onlyOwner returns(bool){
        _tradeLock = !_tradeLock;
        return _tradeLock;
    }
    

    function mint(address account,uint256 amount)public onlyOwner returns(bool){
        _mint(account,amount);
        return true;
    }

    function getOwner()override external view returns (address){
    return _owner;
    }


  function _mint(address account, uint256 amount) internal {
    require(account != address(0), "BEP20: mint to the zero address");
    _balances[account] = _balances[account].add(amount);
    _totalSupply +=amount; 
    emit Transfer(address(0), account, amount);
  }


    function name() public view virtual override returns (string memory) {
        return _name;
    }

   
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

   
    function decimals() public view virtual override returns (uint8) {
        return _decimals;
    }

    function totalSupply() public virtual view  override returns (uint256){
        return _totalSupply;
    }

    function balanceOf(address account)public virtual view  override returns (uint256){
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount)public virtual  override returns (bool){
        _transfer(_msgSender(),recipient,amount);
        return true;
    }

    function allowance(address owner, address spender)public virtual view  override returns (uint256){
       return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount)public virtual override returns (bool){
        _approve(_msgSender(),spender,amount);
        return true;
    }


  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
    return true;
  }


  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "BEP20: decreased allowance below zero"));
    return true;
  }

    function transferFrom(address sender,address recipient,uint256 amount)public virtual override returns (bool){
        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "BEP20: transfer amount exceeds allowance");
        _transfer(sender,recipient,amount);
           unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }
        return true;
    }


    function addWhiteList(address account)public onlyOwner returns(bool){
        _whiteList[account] = true;
        return true;
    }
    function removeWhiteList(address account)public onlyOwner returns(bool){
         _whiteList[account] = false;
        return true;
    }

    function addBlackList(address account)public onlyOwner returns(bool){
        _blackList[account] = true;
        return true;
    }
    function removeBlackList(address account)public onlyOwner returns(bool){
         _blackList[account] = false;
        return true;
    }


    function _transfer(address sender ,address recipient ,uint amount) internal virtual{
        require(recipient !=address(0),"ERC20: transfer to the zero address");
        require(_blackList[sender] !=true,"Blacklist account cannot be operated");
        require(((_tradeLock==true)&&(isContract(sender)||isContract(recipient))&&(_whiteList[sender]==false))!=true,"canot trade now");
            
           _transferFrom(sender,recipient,amount);
       
    }

    function isContract(address account) internal view returns (bool) {
        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts
        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned
        // for accounts without code, i.e. `keccak256('')`
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly {codehash := extcodehash(account)}
        return (codehash != accountHash && codehash != 0x0);
    }


    function isContract1(address addr) internal view returns(bool){
        uint256 size;
        assembly{size:=extcodesize(addr)}
     
        return size>0;//
    }

    function _transferFrom(address sender , address recipient ,uint256 amount)internal virtual{
    
        require(sender != address(0), "BEP20: transfer from the zero address");
        require(amount >0, "Transfer amount must be greater than zero");
        require(_balances[sender] >= amount,"BEP20: transfer amount exceeds balance");
        uint256 senderBalance = _balances[sender];
        _balances[sender] = senderBalance.sub(amount);
        unchecked{
            _balances[recipient] += amount;
        } 
        emit Transfer(sender,recipient,amount);
    }

    function _burn(uint256 amount) internal  {
        _transferFrom(_msgSender(),address(0),amount);
        _totalSupply -=amount;
    }
    function burn(uint256 amount)public onlyOwner returns(bool){
        _burn(amount);
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
 
}
